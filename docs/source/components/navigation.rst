**Navigation**
======================

.. meta::
   :description lang=en: Automate building, version=0.1, and hosting of your technical documentation continuously on Read the Docs.

.. raw:: html

    <a style="display: none;" rel="me" href="https://fosstodon.org/@readthedocs">Mastodon</a>

**Preface**
-----------

The navigation module is a key part of self-driving vehicles, guiding the vehicle from one point to another. It has 
important tasks like figuring out the best overall route (global path planning), planning short-term moves (local path planning), 
and controlling how the vehicle actually moves.

For the navigation module to work, it gets information like where the vehicle is (localization) and detailed maps. Then, it 
decides on important details, like how fast the vehicle should go and how it should turn. These decisions are then sent to the 
control module, which makes the vehicle move accordingly.

In practical terms, the planning part of the navigation module has two jobs. First, the global path planning decides the 
best way to go from where the vehicle is to where it needs to be. Second, the local planning comes up with short-term plans 
for the vehicle to follow in real-time, especially when there are unexpected things in the way. 

Within the field of control systems, mature algorithms such as PID (Proportional-Integral-Derivative) and LQR (Linear Quadratic Regulator) 
have reached an advanced stage of development. In PAVs, the implementation of PID control has been integrated and embedded into an STM32 
control board to ensure responsiveness and meet real-time operational requirements.


**List of Navigation  Algorithms**
-----------------------------------

ISSPA has deployed one or several benchmark algorithms for both planning and control tasks within the Navigation module. 
For planning, it predominantly relies on the technology path provided by the ROS Navigation stack, 
while the control aspect incorporates the classic PID control algorithm flashed onto the development board.

Here is the algorithmic breakdown for each task implementation:
+----------------------+----------------------+----------------+
|      Planning (ROS Navigation Stack)        |     Control    |
+----------------------+----------------------+----------------+
|     Global Planner   |     Local Planner    |       PID      |
+======================+======================+================+
|          A*          |         TEB          |       ...      |
+----------------------+----------------------+----------------+
|          D*          |         DWA          |       ...      |
+----------------------+----------------------+----------------+
|          PSO         |         ...          |       ...      |
+----------------------+----------------------+----------------+

In the followint parts, we will discuss more details of this tasks.


**ROS Navigation Stack**
------------------------

The ROS Navigation Stack is a comprehensive planning framework in robotic research, serving as a sophisticated navigation solution. 
Comprising an array of algorithms and modules, it empowers robots to autonomously traverse their environment while avoiding obstacles. 
This stack incorporates fundamental components such as localization, mapping, and path planning, providing a holistic solution for 
robotic navigation challenges. In essence, it serves as a cornerstone in the realm of robotic systems, facilitating intelligent 
and adaptive movement in complex surroundings.

In the ISSPA, we employ a set of foundational algorithms, encompassing both baseline methods and advanced global and 
local planning strategies. Notable global planning algorithms like D* and A* are utilized to delineate optimal routes, 
while local planning algorithms such as TEB and DWA contribute to nuanced and adaptive trajectory planning. To enhance user-friendliness, 
each algorithm is accompanied by its dedicated parameter file, simplifying the process of swiftly optimizing parameters.

.. figure:: ../imgs/indoor_navigation_demo.png
   :alt: Indoor Navigation example
   :align: center
   :scale: 50%

   **Indoor Navigation example**

The figure above shows a test of the navigation algorithm in a lab environment, where the green lines are the trajectories generated by 
global planning (D*), the blue lines are the trajectories generated by the local planning (TEB), and the colored dots surrounding 
the vicinity of the vehicle are the return points of the 3D LiDAR.

Within the control module, we seamlessly integrate the Proportional-Integral-Derivative (PID) algorithm into the Microcontroller Unit (MCU). 
The PID algorithm, renowned for its classical simplicity and ease of implementation, takes center stage in governing the control dynamics 
of the system. This classical control approach within the MCU ensures stability and precision in steering the system's behavior, establishing 
a robust and accessible control architecture.


**Input & Output**
------------------


**Reference**
--------------